apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.1"

    testOptions {
        unitTests.returnDefaultValues = true
    }

    defaultConfig {
        applicationId "com.samples.film_finder"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        buildConfigField("String", "TMDB_API_V3", "\"" + getApiKey() + "\"")
        buildConfigField("String", "TMDB_API_V4", "\"" + getApiToken() + "\"")

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.google.android.material:material:1.2.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
    testImplementation 'junit:junit:4.12'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

/**
 * Fetches the API key to be used as "api_key" query parameter to authenticate requests to
 * The Movie Database.
 *
 * @return the API key query parameter value.
 */
def getApiKey() {
    return project.findProperty("tmdb.api.key")
}

/**
 * Fetches the API bearer token to be used in the authentication header attached to requests to
 * The Movie Database.
 *
 * @return the bearer token value.
 */
def getApiToken() {
    return project.findProperty("tmdb.api.token")
}